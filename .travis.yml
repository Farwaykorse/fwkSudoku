##====---- .travis.yml                                                ----====##
language: cpp

git:
  depth: 20
  quiet: true

branches:
  except:
  - /^[Aa]pp[Vv]eyor.*/

env:
  global:
  # Ninja-build
  - NINJA_VER: v1.8.2
  - NINJA_SHA512: 38fcb68e745c1f15b4b50f20069ffe686b1ef5baf93b74958e132ea5d30d155cf6970d6dc1b095aafd421ebd8bcc63acf4f64e305c496266b5182f99b815cca5
  # vcpkg
  - TOOLCHAIN_FILE: "$HOME/tools/vcpkg/scripts/buildsystems/vcpkg.cmake"

##====--------------------------------------------------------------------====##
## Define Build Configurations
# No build matrix, each item in matrix:include is single build configuration.
#
# Building vcpkg requires at least g++-7
#
# Defaults
os: linux
dist: xenial

# Toolchain installation
# Documentation: https://docs.travis-ci.com/user/installing-dependencies/
# Finding apt packages: https://packages.ubuntu.com/search
# Ubuntu Toolchain test builds:
#   https://launchpad.net/~ubuntu-toolchain-r/+archive/ubuntu/test
# LLVM apt resources: https://apt.llvm.org
# TravisCI apt safelist:
#   https://github.com/travis-ci/apt-source-safelist/blob/master/ubuntu.json
# libcxx documentation:
#   https://libcxx.llvm.org/docs/UsingLibcxx.html
matrix:
  include:
  - name: GCC-8 Debug
    env:
    - C_compiler:   gcc-8
    - CXX_compiler: g++-8
    - CONFIGURATION: Debug
    addons: &GCC8
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - g++-8

  - name: GCC-8 Release
    env:
    - C_compiler:   gcc-8
    - CXX_compiler: g++-8
    - CONFIGURATION: Release
    addons: *GCC8

  - name: GCC-7 Debug
    env:
    - C_compiler:   gcc-7
    - CXX_compiler: g++-7
    - Coverage:     gcov-7
    - CONFIGURATION: Debug
    addons: &GCC7
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - g++-7

  - name: GCC-7 Release
    env:
    - C_compiler:   gcc-7
    - CXX_compiler: g++-7
    - CONFIGURATION: Release
    addons: *GCC7

  - name: Clang-7 Debug
    dist: xenial
    env:
    - C_compiler:   clang
    - CXX_compiler: clang++
    - Coverage: grcov
    - CONFIGURATION: Debug
    addons: &clang7
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - g++-7

  - name: Clang-7 Release
    dist: xenial
    env:
    - C_compiler:   clang
    - CXX_compiler: clang++
    - CONFIGURATION: Release
    addons: *clang7

  - name: Clang-7 libc++ Debug
    dist: xenial
    env:
    - C_compiler:   clang
    - CXX_compiler: clang++
    - CXX_lib: libc++
    - Coverage: grcov
    - CONFIGURATION: Debug
    addons: &clang7lib
      apt:
        sources:
        - llvm-toolchain-xenial-7
        - ubuntu-toolchain-r-test
        packages:
        - g++-7
        - libc++-7-dev
        - libc++abi-7-dev

  - name: Clang-7 libc++ Release
    dist: xenial
    env:
    - C_compiler:   clang
    - CXX_compiler: clang++
    - CXX_lib: libc++
    - CONFIGURATION: Release
    addons: *clang7lib

  - name: Clang-6.0 Debug
    dist: xenial
    env:
    - C_compiler: clang-6.0
    - CXX_compiler: clang++-6.0
    - Coverage: grcov
    - CONFIGURATION: Debug
    addons: &clang6
      apt:
        sources:
        - llvm-toolchain-xenial-6.0
        - ubuntu-toolchain-r-test
        packages:
        - clang-6.0
        - g++-7

  - name: Clang-6.0 Release
    dist: xenial
    env:
    - C_compiler: clang-6.0
    - CXX_compiler: clang++-6.0
    - CONFIGURATION: Release
    addons: *clang6

  - name: Clang-5.0 Debug
    dist: xenial
    env:
    - C_compiler: clang-5.0
    - CXX_compiler: clang++-5.0
    - Coverage: grcov
    - CONFIGURATION: Debug
    addons: &clang5
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - clang-5.0
        - g++-7

  - name: Clang-4.0 Debug
    dist: xenial
    env:
    - C_compiler: clang-4.0
    - CXX_compiler: clang++-4.0
    - CONFIGURATION: Debug
    addons: &clang4
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - clang-4.0
        - g++-7

  - name: AppleClang Xcode-10.1
    os: osx
    osx_image: xcode10.1 # same compiler as Xcode 10.0
    env:
    - Coverage: grcov
    - CONFIGURATION: Debug
    addons: &OSX
      homebrew:
        packages:
        - coreutils # for sha512sum & nproc
        - ninja
        - gcc6 # vcpkg requires gcc-6 or better

  - name: AppleClang Xcode-9.4
    os: osx
    osx_image: xcode9.4 # same compiler as Xcode 9.3
    env:
    - Coverage: grcov
    - CONFIGURATION: Debug
    addons: &OSX-legacy
      homebrew:
        packages:
        - coreutils # for sha512sum & nproc
        - ninja
        - gcc6 # vcpkg requires gcc-6 or better
        - cmake # Xcode 9.4 and earlier have 3.11.4
        update: true

  - name: AppleClang Xcode-9
    os: osx
    osx_image: xcode9
    osx_image: xcode9 # same compiler in Xcode 9.0, 9.1 and 9.2
    env:
    - Coverage: grcov
    - CONFIGURATION: Debug
    addons: *OSX-legacy

  allow_failures:
  - name: Clang-4.0 Debug
  - name: AppleClang Xcode-9.4
  - name: AppleClang Xcode-9

##====--------------------------------------------------------------------====##
## Install tools and dependencies
before_install:
- |
  # Setup
  mkdir -p ~/tools && cd ~/tools
  if [[ ${C_compiler:-} ]]; then   export CC=${C_compiler:?}; fi
  if [[ ${CXX_compiler:-} ]]; then export CXX=${CXX_compiler:?}; fi
  if [[ ${TRAVIS_OS_NAME} == "osx" ]]; then
    export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
  fi
- |
  # Install Ninja-build (if not installed)
  if [[ ! -x "$(command -v ninja)" ]]; then
  ( set -euxo pipefail
    echo "-- Install Ninja-build..."
    file_name="ninja-${TRAVIS_OS_NAME}.zip"
    NINJA_URL="https://github.com/ninja-build/ninja/releases/download/${NINJA_VER}/${file_name}"
    cd ~/tools
    wget -q "${NINJA_URL}" --tries=3 --timeout 90 -nc
    sum=$(sha512sum ${file_name})
    if [[ ${sum:0:128} = ${NINJA_SHA512} ]]; then
      unzip -q ${file_name} -d ninja
      echo "-- Install Ninja-build... done"
    else
      echo "Ninja hash has changed!"  >&2
      echo "Expecting: $NINJA_SHA512" >&2
      echo "Actual:    $sum"          >&2
      exit 1
    fi
  )
  export PATH=$HOME/tools/ninja:$PATH
  fi
- |
  # Install Mozilla/grcov
  if [[ ${Coverage:-} && ${Coverage} == "grcov" ]]; then
  ( set -euxo pipefail
    GRCOV_TAG="v0.3.2"
    if [[ ${TRAVIS_OS_NAME} == "linux" ]]; then
      GRCOV_SHA512="8d29bd3aee6855a50d0b55b3e3ea14a51b989451aedebb8f2f15d309d4887e5aa005ed140148800fe198fadbeb844355e8df310d47f77edc453d8754f667c790"
    elif [[ ${TRAVIS_OS_NAME} == "osx" ]]; then
      GRCOV_SHA512="94a9bca1ca54e6d0b3eadc0aa88263852df8e29f5d3739142ff981a486ec90e25fb01f63443a90805856aec28b64d0e4327530cd4b50bb37ac4a8b05e9594481"
    fi
    echo "-- Install grcov..."
    file_name="grcov-${TRAVIS_OS_NAME}-x86_64.tar.bz2"
    GRCOV_URL="https://github.com/mozilla/grcov/releases/download/${GRCOV_TAG}/${file_name}"
    wget "${GRCOV_URL}" --tries=3 --timeout 90 -nc
    sum=$(sha512sum ${file_name})
    sum=${sum:0:128}
    if [[ ${sum} == ${GRCOV_SHA512} ]]; then
      mkdir -p ~/tools/grcov
      tar --extract --bzip2 --file=${file_name} --directory=grcov
      rm ${file_name}
      echo "-- Install grcov... done"
    else
      echo "grcov hash has changed!"    >&2
      echo "Expecting: ${GRCOV_SHA512}" >&2
      echo "Actual:    ${sum}"          >&2
      exit 1
    fi
  )
  export PATH=$HOME/tools/grcov:$PATH
  fi
- |
  # Download vcpkg
  cd ~/tools
  ( set -euo pipefail
    git clone --depth=1 --branch=master --quiet https://github.com/Microsoft/vcpkg.git
    mv -f -t ./vcpkg ~/tools/.cache/vcpkg/* || echo "No cached files for vcpkg."
  )
  export PATH=$PATH:$HOME/tools/vcpkg
- |
  # Install/Update vcpkg
  ( set -euxo pipefail
    if [[ ! -x "$(command -v vcpkg)" ||
      ( $(vcpkg update) = 'Warning: Different source'*'for vcpkg' ) ]]
    then
      if [[ ${TRAVIS_OS_NAME} == "linux" &&
        ( ${CXX_compiler} != g++* || ${CXX_compiler%g++-} < 7 ) ]]
      then
        eval "CC=gcc-7 && CXX=g++-7" # Minimum requirement vcpkg on Linux
      elif [[ ${TRAVIS_OS_NAME} == "osx" ]]; then
        eval "CC=gcc-6 && CXX=g++-6" # Minimum requirement vcpkg on OSX
      fi
      ~/tools/vcpkg/bootstrap-vcpkg.sh
    fi
  )
- |
  # Using libc++
  if [[ ${CXX_compiler} == clang* && ${CXX_lib:-} ]]; then
    FLAGS="-stdlib=${CXX_lib}"
    #if [[ ${CXX_lib} == libc++ ]]; then
    #  FLAGS="${FLAGS} -lc++fs"
    #  FLAGS="${FLAGS} -lc++experimental"
    #fi
    export CXXFLAGS="${CXXFLAGS} ${FLAGS}"
  fi

install:
- vcpkg install ms-gsl
- vcpkg install gtest
- |
  # Update installed packages
  ( set -euo pipefail
    vcpkg update # print potential updates
    if [[ $(vcpkg upgrade) != *'installed packages are up-to-date'* ]]
    then
      vcpkg upgrade --no-dry-run
    fi
  )

##====--------------------------------------------------------------------====##
before_script:
- |
  # Configuration
  cd "${TRAVIS_BUILD_DIR}"
  mkdir -p build
  cd build
  GeneratorFlags='-k 10' # Ninja
  if [[ ${Coverage} ]]; then coverage_bool="ON"
  else coverage_bool="OFF"
  fi
  export CFLAGS="${CFLAGS} -Werror"
  export CXXFLAGS="${CXXFLAGS} -Werror"
- >
  CMakeGenFlags="-G Ninja
    -DCMAKE_BUILD_TYPE=${CONFIGURATION:?}
    -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE:?}
    -DCODE_COVERAGE=${coverage_bool:?}
    -Wdev
    -Werror=dev
    --warn-uninitialized
  " && echo $CMakeGenFlags
- |
  CMakeBuildFlags="--config ${CONFIGURATION:?} -- ${GeneratorFlags=}"
  echo $CMakeBuildFlags

script:
- cmake ${CMakeGenFlags:?} ..
- cmake --build . ${CMakeBuildFlags:?}
- ctest -j $(nproc) --output-on-failure

##====--------------------------------------------------------------------====##
before_cache:
- |
  # Select files for caching
  mkdir -p ~/tools/.cache/vcpkg
  mv -u -t ~/tools/.cache/vcpkg ~/tools/vcpkg/vcpkg ~/tools/vcpkg/installed

cache:
  directories:
  - ~/tools/.cache

after_success:
- |
  # Code coverage
  cd "${TRAVIS_BUILD_DIR}"
  if [[ ${Coverage:-} ]]; then
  ( set -euxo pipefail
    bash_flags="-n ${TRAVIS_JOB_NAME/ /_}" # Replace space with '_'
    if [[ ${Coverage} == "grcov" ]]; then
      coverage_report="coverage.json"
      flags="-t coveralls+ --token unused --commit-sha ${TRAVIS_COMMIT}"
      if [[ ${CXX_compiler:-} == clang* ]]; then flags="${flags} --llvm"; fi
      flags="${flags} --branch"
      grcov ./build ${flags} > ${coverage_report}
    elif [[ ${Coverage} == "lcov" ]]; then
      coverage_report="coverage.info"
      lcov --capture --directory ./build --output-file coverage.info
      lcov --remove coverage.info '/usr/*' --output-file coverage.info
      lcov --list coverage.info
    else
      bash_flags="${bash_flags} -x ${Coverage}"
    fi
    if [[ ${coverage_report:-} && -f "${coverage_report}" ]]; then
      bash_flags="${bash_flags} -f ${coverage_report}"
    fi
    bash <(curl -s https://codecov.io/bash) ${bash_flags} ||
      echo "Codecov did not collect coverage reports"
  )
  fi

##====--------------------------------------------------------------------====##
after_script:
- |
  # Binary sizes:
  ls -l "${TRAVIS_BUILD_DIR}/build/Console/console" 2>/dev/null || echo
  ls -l "${TRAVIS_BUILD_DIR}/build/SudokuTests/SudokuTests" 2>/dev/null) || echo
