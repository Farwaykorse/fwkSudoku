##====---- .travis.yml                                                ----====##
# TravisCI build configuration.
# Continuous integration testing on Linux and OSX. Using GCC, LLVM/Clang and
# AppleClang. Debug and Release builds, unit tests and codecoverage.
language: cpp

git:
  depth: 20
  quiet: true

env:
  global:
  # vcpkg
  - VCPKG_DIR:       $HOME/tools/vcpkg
  - TOOLCHAIN_FILE: "$HOME/tools/vcpkg/scripts/buildsystems/vcpkg.cmake"

##====--------------------------------------------------------------------====##
## Define Build Configurations
# No build matrix, each item in matrix:include is single build configuration.
#
# Environment variables:
# - CXX_lib: library selection.
#   - libc++  (Linux only, default on OSX.)
# - CC/CXX_vcpkg: build vcpkg with a different compiler.
#   Linux minimum: `g++-7`; OSX minimum: `g++-6`; Or clang-8 (with libc++-8).
# - CONFIGURATION: specifies the build configuration.
#   When not set both a Debug and a Release configurations are build in single
#   job session.
# - Coverage:
#   Send code coverage data to codecov.io.
#   When no CONFIGURATION defined, only Debug build runs coverage.
#   - grcov: currently the only option supporting LLVM/clang and AppleClang.
#   - lcov:  GNU tool, mostly redundant by Codecov's bash script.
#   - *: if an executable on the PATH, like: gcov-6, run by the bash script.
#   - any other value runs the bash script in default mode. (I.e. true)
#
## Toolchain installation information:
# https://docs.travis-ci.com/user/installing-dependencies/
# Finding apt packages:
# https://packages.ubuntu.com/search
# Ubuntu Toolchain test builds:
# https://launchpad.net/~ubuntu-toolchain-r/+archive/ubuntu/test
# LLVM apt resources:
# https://apt.llvm.org
# TravisCI apt safelist:
# https://github.com/travis-ci/apt-source-safelist/blob/master/ubuntu.json
# libc++ documentation:
# https://libcxx.llvm.org/docs/UsingLibcxx.html
# Homebrew OSX packages:
# https://formulae.brew.sh/formula/
# Xcode compiler list and relation to LLVM:
# https://en.wikipedia.org/wiki/Xcode#Toolchain_versions

# Defaults
os: linux
dist: bionic

# Specify Stage Order and Conditions
stages:
- "Build & Test Latest" # First: (4) builds to run first
- name: "Build & Test"  # If all succeed build rest
  if: NOT (branch =~ /^[Aa]pp[Vv]eyor.*/)

jobs:
  include:
  - name: GCC-9
    stage: "Build & Test Latest"
    env:
    - CC:  gcc-9
    - CXX: g++-9
    - Coverage: gcov-9
    addons:
      apt:
        sources:
        - sourceline: ppa:ubuntu-toolchain-r/test
        packages:
        - g++-9

  - name: GCC-8
    stage: "Build & Test"
    env:
    - CC:  gcc-8
    - CXX: g++-8
    - Coverage: gcov-8
    addons:
      apt:
        packages:
        - g++-8

  - name: GCC-7 # default on Bionic image
    stage: "Build & Test"
    env:
    - CC:  gcc-7
    - CXX: g++-7
    - Coverage: gcov-7

  - name: Clang-8
    stage: "Build & Test Latest"
    env:
    - CC: clang-8
    - CXX: clang++-8
    - CXX_vcpkg: g++
    - Coverage: grcov
    addons:
      apt:
        sources:
        - llvm-toolchain-bionic-8
        packages:
        - clang-8

  - name: Clang-8 libc++
    stage: "Build & Test Latest"
    env:
    - CC: clang-8
    - CXX: clang++-8
    - CXX_lib: libc++
    - Coverage: grcov
    addons:
      apt:
        sources:
        - sourceline:
            'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-8 main'
          key_url: https://apt.llvm.org/llvm-snapshot.gpg.key
        packages:
        - clang-8
        - libc++-8-dev
        - libc++abi-8-dev

  - name: Clang-7 # default on Xenial and Bionic images
    stage: "Build & Test"
    compiler: clang
    env:
    - CXX_vcpkg: g++ # vcpkg executable requires GCC-7 or better
    - Coverage: grcov

  - name: Clang-7 libc++
    env:
    - CC:  clang
    - CXX: clang++
    - CXX_lib: libc++
    - CXX_vcpkg: g++
    - Coverage: grcov
    addons:
      apt:
        packages:
        - libc++-7-dev
        - libc++abi-7-dev

  - name: Clang-6.0
    env:
    - CC: clang-6.0
    - CXX: clang++-6.0
    - CXX_vcpkg: g++
    - Coverage: grcov
    addons:
      apt:
        packages:
        - clang-6.0

  - name: Clang-6.0 libc++
    env:
    - CC: clang-6.0
    - CXX: clang++-6.0
    - CXX_lib: libc++
    - CXX_vcpkg: g++-7
    - Coverage: grcov
    addons:
      apt:
        packages:
        - clang-6.0
        - libc++-dev # 6.0 on Bionic
        - libc++abi-dev

  - name: Clang-5.0
    env:
    - CC: clang-5.0
    - CXX: clang++-5.0
    - CXX_vcpkg: g++
    - Coverage: grcov
    addons:
      apt:
        packages:
        - clang-5.0

  - name: Clang-4.0 Debug
    if: branch =~ /^[Tt]ravis.*$/
    env:
    - CC: clang-4.0
    - CXX: clang++-4.0
    - CXX_vcpkg: g++
    - CONFIGURATION: Debug
    addons:
      apt:
        packages:
        - clang-4.0

  - name: AppleClang Xcode-10.2
    os: osx
    osx_image: xcode10.2 # AppleClang 10.0.1
    env:
    - CXX_vcpkg: g++-7
    - Coverage: grcov
    addons:
      homebrew:
        packages:
        - ninja
        - gcc@7 # vcpkg requires gcc-7 or later

  - name: AppleClang Xcode-10.1
    if: branch =~ /^(master|[Tt]ravis.*)$/
    os: osx
    osx_image: xcode10.1 # AppleClang 10.0.0 same compiler as Xcode 10.0
    env:
    - CXX_vcpkg: g++-7
    - Coverage: grcov
    addons:
      homebrew:
        packages:
        - ninja
        - gcc@7 # vcpkg requires gcc-7 or better
        update: true

  # Note: can not build vcpkg on xcode-9.3/4, missing OSX update on Travis.
  # Earliest available with C++17 support
  - name: AppleClang Xcode-9
    if: branch =~ /^(master|[Tt]ravis.*)$/
    os: osx
    osx_image: xcode9 # AppleClang 9.1.0 same compiler in Xcode 9.0, 9.1 and 9.2
    env:
    - CXX_vcpkg: g++-7
    - Coverage: grcov
    addons:
      homebrew:
        packages:
        - ninja
        - gcc@7 # vcpkg requires gcc-6 or better
        - cmake # Xcode 9.4 and earlier have 3.11.4
        update: true

  allow_failures:
  - name: Clang-4.0 Debug

##====--------------------------------------------------------------------====##
## Install tools and dependencies
before_install:
- |
  # Setup
  mkdir -p ~/tools && cd ~/tools
  if [[ ${TRAVIS_OS_NAME} == "osx" ]]; then
    export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
  fi
  if [[ ${TRAVIS_EVENT_TYPE} == "cron" ]]; then
    Coverage=""
  fi
- |
  # Install Ninja-build (if not installed)
  if [[ ! -x "$(command -v ninja)" ]]; then
  ( set -euxo pipefail
    NINJA_VER="v1.9.0"
    if [[ ${TRAVIS_OS_NAME} == "linux" ]]; then
      file_name="ninja-linux.zip"
      NINJA_SHA512="751fd86520a1a38fb47baadf4a46ab49f9ebb11d6ff9c01e71326564ebf10f141ca2627620e315fcab82db1493a30123f11194f41226241d80413d5008acfc59"
    elif [[ ${TRAVIS_OS_NAME} == "osx" ]]; then
      file_name="ninja-mac.zip"
      NINJA_SHA512="ec2294b430b89134f54f3388bafd760697c7eb33792bc094416b918371619e79592629973a60fcc35335a92eaa9ed84a41f2bc53c846eb8abf3422d4322cd3e5"
    fi
    echo "-- Install Ninja-build..."
    NINJA_URL="https://github.com/ninja-build/ninja/releases/download/${NINJA_VER}/${file_name}"
    wget -q "${NINJA_URL}" --tries=3 --timeout 90 -nc
    sum=$(sha512sum ${file_name})
    if [[ ${sum:0:128} = ${NINJA_SHA512} ]]; then
      unzip -q ${file_name} -d ninja
      chmod -c +x ninja/ninja
      echo "-- Install Ninja-build... done"
    else
      echo "Ninja hash has changed!"  >&2
      echo "Expecting: $NINJA_SHA512" >&2
      echo "Actual:    $sum"          >&2
      exit 1
    fi
  )
  export PATH=$HOME/tools/ninja:$PATH
  fi
- |
  # Install Mozilla/grcov
  if [[ ${Coverage:-} && ${Coverage} == "grcov" ]]; then
  ( set -euxo pipefail
    if [[ ${TRAVIS_OS_NAME} == "linux" ]]; then
      GRCOV_TAG="v0.5.1"
      GRCOV_SHA512="5086b0b53ba15843ca83c55e4ea95cdccf544fd648382cab8d603e9f634772f4edf7221032809f35055986c29c7fa6678ab2ab291e4f9c430f3068117239996e"
    elif [[ ${TRAVIS_OS_NAME} == "osx" ]]; then
      GRCOV_TAG="v0.5.1"
      GRCOV_SHA512="26ffcea469e3e02b55352766c2a8889f34c116e03acc809abf22a78b027173a7e3c6c34144ba98338f3c10d231139b878b1f70517cb2a39084d1a0227222de6a"
    fi
    echo "-- Install grcov..."
    file_name="grcov-${TRAVIS_OS_NAME}-x86_64.tar.bz2"
    GRCOV_URL="https://github.com/mozilla/grcov/releases/download/${GRCOV_TAG}/${file_name}"
    wget "${GRCOV_URL}" --tries=3 --timeout 90 -nc
    sum=$(sha512sum ${file_name})
    sum=${sum:0:128}
    if [[ ${sum} == ${GRCOV_SHA512} ]]; then
      mkdir -p ~/tools/grcov
      tar --extract --bzip2 --file=${file_name} --directory=grcov
      chmod -c +x grcov/grcov
      rm ${file_name}
      echo "-- Install grcov... done"
    else
      echo "grcov hash has changed!"    >&2
      echo "Expecting: ${GRCOV_SHA512}" >&2
      echo "Actual:    ${sum}"          >&2
      exit 1
    fi
  )
  export PATH=$HOME/tools/grcov:$PATH
  fi
- |
  # Download vcpkg
  ( set -euo pipefail
    # Full history clone for rebuild detection.
    git clone --quiet https://github.com/Microsoft/vcpkg.git ${VCPKG_DIR}
    mv -f -t ${VCPKG_DIR} ~/tools/.cache/vcpkg/* || echo "No cached files."
  )
  export PATH=$PATH:${VCPKG_DIR}
- |
  # Install/Update vcpkg
  cd ${VCPKG_DIR}
  ( set -euxo pipefail
    VCPKG_SRC_HASH="${VCPKG_DIR}/vcpkg_src_hash" && touch ${VCPKG_SRC_HASH}
    GENERATE_SRC_HASH="(
      git log --format=format:\"%H\" --max-count=1 -- toolsrc
    )"
    if [[ ! -x "$(command -v vcpkg)" ||
      ( $(vcpkg update) == 'Warning: Different source'*'for vcpkg'* ) ||
      ( $(eval ${GENERATE_SRC_HASH}) != $(< ${VCPKG_SRC_HASH}) ) ]]
    then
      if [[ ${CC_vcpkg:-} ]];  then eval "CC=${CC_vcpkg}"; fi
      if [[ ${CXX_vcpkg:-} ]]; then eval "CXX=${CXX_vcpkg}"; fi
      if [[ ${CXX} == clang* && ${CXX_lib:-} ]]; then
        export CXXFLAGS="${CXXFLAGS:-} -stdlib=${CXX_lib}"
      fi
      bootstrap-vcpkg.sh
      eval ${GENERATE_SRC_HASH} > ${VCPKG_SRC_HASH}
    fi
  )
- |
  # Using libc++
  if [[ ${CXX} == clang* && ${CXX_lib:-} ]]; then
    FLAGS="-stdlib=${CXX_lib}"
    #if [[ ${CXX_lib} == libc++ ]]; then
    #  FLAGS="${FLAGS} -lc++fs"
    #  FLAGS="${FLAGS} -lc++experimental"
    #fi
    export CXXFLAGS="${CXXFLAGS:-} ${FLAGS}"
  fi

install:
- vcpkg install ms-gsl
- vcpkg install gtest
- |
  # Update installed packages
  ( set -euo pipefail
    vcpkg update # print potential updates
    if [[ $(vcpkg upgrade) != *'installed packages are up-to-date'* ]]
    then
      vcpkg upgrade --no-dry-run
    fi
  )

##====--------------------------------------------------------------------====##
before_script:
- |
  # Configuration
  cd "${TRAVIS_BUILD_DIR}"
  mkdir -p build
  mkdir -p build2
  GeneratorFlags='-k 10' # Ninja
  if [[ ${Coverage} ]]; then coverage_bool="ON"
  else coverage_bool="OFF"
  fi
  export CFLAGS="${CFLAGS} -Werror"
  export CXXFLAGS="${CXXFLAGS} -Werror"
- |
  CMakeGenFlags=("-G Ninja")
  CMakeGenFlags+=("-DCMAKE_BUILD_TYPE=${CONFIGURATION:-Debug}")
  CMakeGenFlags+=("-DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE:?}")
  CMakeGenFlags+=("-DCODE_COVERAGE=${coverage_bool:?}")
  CMakeGenFlags+=(-Wdev -Werror=dev --warn-uninitialized)
  echo ${CMakeGenFlags[@]}
  if [[ ! ${CONFIGURATION:-} ]]; then
    B_REL="Build both Debug and Release configurations"
    CMakeGenFlags2=("-G Ninja")
    CMakeGenFlags2+=("-DCMAKE_BUILD_TYPE=Release")
    CMakeGenFlags2+=("-DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE:?}")
    CMakeGenFlags2+=(-Wdev -Werror=dev --warn-uninitialized)
  fi

script:
- cd ./build
- cmake ${CMakeGenFlags[@]:?} ..
- cmake --build . --config ${CONFIGURATION:-Debug} -- ${GeneratorFlags}
- ctest -j $(nproc) --output-on-failure
- cd ../build2
- if [[ ${B_REL:-} ]]; then cmake ${CMakeGenFlags2[@]:?} ..; fi
- |
  if [[ ${B_REL:-} ]]; then
    cmake --build . --config Release -- ${GeneratorFlags}
  fi
- if [[ ${B_REL:-} ]]; then ctest -j $(nproc) --output-on-failure; fi

##====--------------------------------------------------------------------====##
before_cache:
- |
  # Select files for caching
  mkdir -p ~/tools/.cache/vcpkg
  mv -u -t ~/tools/.cache/vcpkg ${VCPKG_DIR}/vcpkg ${VCPKG_DIR}/installed
  mv -u -t ~/tools/.cache/vcpkg ${VCPKG_DIR}/vcpkg_src_hash

cache:
  directories:
  - ~/tools/.cache

##====--------------------------------------------------------------------====##
after_success:
- |
  # Code coverage
  cd "${TRAVIS_BUILD_DIR}/build"
  if [[ ${Coverage:-} ]]; then
  ( set -euxo pipefail
    Source_Dir="${TRAVIS_BUILD_DIR}"
    Build_Dir="${TRAVIS_BUILD_DIR}/build"
    bash_flags=("-n ${TRAVIS_JOB_NAME/ /_}") # Replace space with '_'
    if [[ ${Coverage} == "grcov" ]]; then
      bash_flags+=("-X gcov") # Disable gcov
      coverage_report="coverage.json"
      flags=("--branch")
      if [[ ${CXX} == clang* ]]; then flags+=("--llvm"); fi
      options=("-s ${Source_Dir:?}")
      options+=("-t coveralls+" "--token unused")
      options+=("--commit-sha ${TRAVIS_COMMIT}")
      options+=("--prefix-dir ../") # suppress warning grcov v0.5.1
      grcov ${Build_Dir:?} ${flags[@]} ${options[@]} > ${coverage_report:?}
    elif [[ ${Coverage} == "lcov" ]]; then
      bash_flags+=("-X gcov") # Disable gcov
      coverage_report="coverage.info"
      lcov --capture --directory ${Build_Dir:?} --output-file coverage.info
      lcov --remove coverage.info '/usr/*' --output-file coverage.info
      lcov --list coverage.info
    elif [[ -x "$(command -v ${Coverage})" ]]; then
      bash_flags+=("-x ${Coverage}")
    fi
    if [[ ${coverage_report:-} && -f "${coverage_report}" ]]; then
      bash_flags+=("-f ${coverage_report}")
    fi
    if [[ "${Coverage}" == "gcov-8" ]]; then
      # Filter-out messages: Prevent exceeding log length.
      bash <(curl -s https://codecov.io/bash) ${bash_flags[@]} 2>&1 |
        grep -v "has arcs" ||
        echo "Codecov did not collect coverage reports"
    else
      bash <(curl -s https://codecov.io/bash) ${bash_flags[@]} ||
        echo "Codecov did not collect coverage reports"
    fi
  )
  fi

##====--------------------------------------------------------------------====##
after_script:
- |
  # Binary sizes:
  ls -l "${TRAVIS_BUILD_DIR}/build/Console/console" 2>/dev/null || echo
  ls -l "${TRAVIS_BUILD_DIR}/build/SudokuTests/SudokuTests" 2>/dev/null || echo
  ls -l "${TRAVIS_BUILD_DIR}/build2/Console/console" 2>/dev/null || echo
  ls -l "${TRAVIS_BUILD_DIR}/build2/SudokuTests/SudokuTests" 2>/dev/null || echo
