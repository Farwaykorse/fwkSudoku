##====---- appveyor.yml                                               ----====##
version: "{build}"
# fetch repository as a zip archive
shallow_clone: true

cache:
- C:\Tools\vcpkg\installed

##====--------------------------------------------------------------------====##
## Build Matrix Configuration
# Dimensions: 4 (image; platform; configuration; environment:matrix)
#
##====-----------------
# Options:        Values (supported for this script):
# ------------------------------------------------------------------------------
# image           Visual Studio 2017 (default), Visual Studio 2015
# platform        x64 (default), x86
# USE_GENERATOR   CMake (default)
# USE_BUILDSYSTEM MSBuild (default)
#                 Ninja - requires CMake generator
# USE_TOOLSET     MSVC (default)
#                 LLVM - use the installed clang-cl version
##====-----------------
## Create_Matrix
image: Visual Studio 2017

platform:
- x86
- x64

configuration:
- Debug
- Release

environment:
  matrix:
  - USE_TOOLSET: MSVC
    USE_BUILDSYSTEM: Ninja
  - USE_TOOLSET: LLVM
    USE_BUILDSYSTEM: Ninja
  global:
    APPVEYOR_SAVE_CACHE_ON_ERROR: true
    VCVAR2015: 'C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat'
    VCVAR2017: 'C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvarsall.bat'
    # vcpkg
    TOOLCHAIN_FILE: 'C:/Tools/vcpkg/scripts/buildsystems/vcpkg.cmake'
## /Create_Matrix
##====-----------------
## Remove_from_Matrix
matrix:
  exclude:
  # Not supported by script / invalid combination:
  - image: Visual Studio 2015
    USE_BUILDSYSTEM: MSBuild
    USE_TOOLSET: LLVM
## /Remove_from_Matrix
##====-----------------
## Modify_Matrix
# Specializing matrix job configuration
# Note: overwrites existing, only new variables and notifications are merged.
for:
-
  matrix:
    only:
    - USE_BUILDSYSTEM: Ninja
  environment:
    NINJA_TAG:    v1.8.2
    NINJA_SHA512: 9B9CE248240665FCD6404B989F3B3C27ED9682838225E6DC9B67B551774F251E4FF8A207504F941E7C811E7A8BE1945E7BCB94472A335EF15E23A0200A32E6D5
    NINJA_PATH:   C:\Tools\ninja\ninja-%NINJA_TAG%
  cache:
  - C:\Tools\ninja
  - C:\Tools\vcpkg\installed
## /Modify_Matrix

##====--------------------------------------------------------------------====##
## Install tools and dependencies
install:
- ps: |
    if("$env:USE_BUILDSYSTEM" -eq "Ninja") {
      if (![IO.File]::Exists("$env:NINJA_PATH\ninja.exe")) {
        Start-FileDownload `
          "https://github.com/ninja-build/ninja/releases/download/$env:NINJA_TAG/ninja-win.zip"
        $hash = (Get-FileHash ninja-win.zip -Algorithm SHA512).Hash
        if ($env:NINJA_SHA512 -eq $hash) {
          7z e -y -bso0 ninja-win.zip -o"$env:NINJA_PATH"
        } else {
          Write-Warning "Ninja download hash changed!"; Write-Output "$hash"
          $env:APPVEYOR_CACHE_SKIP_SAVE = true
        }
      }
      if ([IO.File]::Exists("$env:NINJA_PATH\ninja.exe")) {
        $env:PATH = "$env:NINJA_PATH;$env:PATH"
      } else { Write-Warning "Failed to find ninja.exe in expected location." }
    }
- vcpkg install ms-gsl:%PLATFORM%-windows
- vcpkg install gtest:%PLATFORM%-windows

##====--------------------------------------------------------------------====##
before_build:
- echo "%APPVEYOR_BUILD_WORKER_IMAGE% %PLATFORM% %CONFIGURATION%"
- echo "Compiler %USE_TOOLSET%; Generator %USE_BUILDSYSTEM%"
- cmake --version
- if %USE_BUILDSYSTEM%==Ninja (ninja --version)
- ps: |
    if ("$env:USE_BUILDSYSTEM" -eq "Ninja") {
      $GeneratorFlags = '-k 10'
      $Architecture = $env:PLATFORM
      if ("$env:APPVEYOR_BUILD_WORKER_IMAGE" -eq "Visual Studio 2015") {
        $env:VCVARSALL = "`"$env:VCVAR2015`" $Architecture"
      } else {
        $env:VCVARSALL = "`"$env:VCVAR2017`" $Architecture"
      }
      $CMakeGenFlags = "-G Ninja"
    } else {
      $GeneratorFlags = '/m /v:minimal'
      if ("$env:APPVEYOR_BUILD_WORKER_IMAGE" -eq "Visual Studio 2015") {
        $Generator = 'Visual Studio 14 2015'
      } else {
        $Generator = 'Visual Studio 15 2017'
      }
      if ("$env:PLATFORM" -eq "x86") { $Architecture = "Win32"}
      else { $Architecture = "x64" }
      if ("$env:USE_TOOLSET" -eq "LLVM") {
        $CMakeGenFlags = `
          "-G `"$Generator`" -A $Architecture -T llvm"
      } else {
        $CMakeGenFlags = "-G `"$Generator`" -A $Architecture"
      }
    }
    if ("$env:USE_TOOLSET" -eq "LLVM") {
      $env:CC  = "clang-cl"
      $env:CXX = "clang-cl"
      $env:CFLAGS   = "$env:CFLAGS -Werror"
      $env:CXXFLAGS = "$env:CXXFLAGS -Werror"
      if ("$env:PLATFORM" -eq "x86") {
        $env:CFLAGS   = "$env:CFLAGS -m32";
        $env:CXXFLAGS = "$env:CXXFLAGS -m32";
      } else {
        $env:CFLAGS   = "$env:CFLAGS -m64";
        $env:CXXFLAGS = "$env:CXXFLAGS -m64";
      }
    } else {
      $env:CFLAGS   = "$env:CFLAGS /WX"
      $env:CXXFLAGS = "$env:CXXFLAGS /WX"
    }
    $env:CMakeGenFlags = "$CMakeGenFlags"            `
      +" -DCMAKE_TOOLCHAIN_FILE=$env:TOOLCHAIN_FILE" `
      +" -Wdev"                                      `
      +" -Werror=dev"                                `
      +" --warn-uninitialized"
    $env:CMakeBuildFlags = "--config $env:CONFIGURATION -- $GeneratorFlags"
- mkdir build
- cd build
- if %USE_BUILDSYSTEM%==Ninja (call %VCVARSALL%)
- echo %CMakeGenFlags%
- cmake .. %CMakeGenFlags%

##====--------------------------------------------------------------------====##
build_script:
- echo %CMakeBuildFlags%
- cmake --build . %CMakeBuildFlags%

##====--------------------------------------------------------------------====##
test_script:
- >-
  ctest -j %NUMBER_OF_PROCESSORS%
  --test-action test --no-compress-output
  --quiet

##====--------------------------------------------------------------------====##
deploy: off

##====--------------------------------------------------------------------====##
on_finish:
- ps: |
    # Process test results
    if (Test-Path ".\Testing\TAG") {
      $tag_name = "$(Get-Content .\Testing\TAG -TotalCount 1)"
      Copy-Item .\Testing\$tag_name\Test.xml .\Test.xml
      $template = "https://raw.githubusercontent.com/rpavlik/jenkins-ctest-plugin/master/ctest-to-junit.xsl"
      $XSLInputElement = New-Object System.Xml.Xsl.XslCompiledTransform
      $XSLInputElement.Load("$template")
      $XSLInputElement.Transform(
        (Resolve-Path .\Test.xml),
        (Join-Path (Resolve-Path .) "ctest-to-junit-results.xml")
      )
      $wc = New-Object 'System.Net.WebClient'
      $wc.UploadFile(
        "https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)",
        (Resolve-Path .\ctest-to-junit-results.xml)
      )
    }

